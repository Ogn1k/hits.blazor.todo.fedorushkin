@page "/tasks/add"
@page "/task/{Id:int}"

@inject IDataService data
@inject NavigationManager navigate

<h3>Taskforum</h3>

@if(TaskItem != null)
{
	<EditForm Model="TaskItem" FromName="TaskForm" OnValidSubmit="ValidSubmit">
		<DataAnnotationsValidator/>
		<ValidationSummary/>

		<h2>новая задача</h2>
		<InputNumber @bind-Value="TaskItem.Id" hidden />
		<div class="form-group d-flex justify-content-between m-2">
			<label class="col-form-label col-3">зАГОЛОВОК</label>
			<InputText @bind-Value="TaskItem.Title" class="form-control" />
			<ValidationMessage For="() => TaskItem.Title"/>
		</div>
		<div class="form-group d-flex justify-content-between m-2">
			<label class="col-form-label col-3">opisanie</label>
			<InputTextArea @bind-Value="TaskItem.Description" class="form-control" />
			<ValidationMessage For="() => TaskItem.FinishDate" />
		</div>
		<div class="form-group d-flex justify-content-between m-2">
			<label class="col-form-label col-3">Дата-окончания</label>
			<InputDate @bind-Value="TaskItem.FinishDate" class="form-control" />
			<ValidationMessage For="() => TaskItem.FinishDate" />
		</div>
		<div class="btn-group">
			<button class="btn btn-primary m-2" type="submit">СоХрАнИтЬ</button>
			<a class="btn btn-primary m-2" href="/">ОТМЕНА</a>
		</div>
	</EditForm>	
}

@code {
	[Parameter]
	public int Id { get; set; }
	[SupplyParameterFromForm]
	TaskItem? TaskItem { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		if(TaskItem == null)
		{
			TaskItem = new();
			if(Id != 0)
			{
				var src = await data.GetTaskAsync(Id);
				TaskItem.Id = src.Id;
				TaskItem.Title = src.Title;
				TaskItem.Description = src.Description;
				TaskItem.FinishDate = src.FinishDate;
			}
		}
	}

	async Task ValidSubmit()
	{
		await data.SaveAsync(TaskItem!);
		navigate.NavigateTo("/");
	}
}
